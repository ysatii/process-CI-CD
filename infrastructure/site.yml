---
- hosts: all
  become: true
  vars:
    java_tarball: openjdk.tar.gz
    java_install_dir: /opt/jdk
  tasks:
    - import_tasks: tasks/install_jdk_final.yml


    - name: Copy OpenJDK tarball
      copy:
        src: "files/{{ java_tarball }}"
        dest: "/tmp/{{ java_tarball }}"
        mode: '0644'

    - name: Extract JDK to /opt
      unarchive:
        src: "/tmp/{{ java_tarball }}"
        dest: /opt
        remote_src: true

    - name: Find extracted JDK directory
      become: true
      find:
        paths: /opt
        file_type: directory
        patterns: 'jdk*'
      register: jdk_dirs

    - name: Rename JDK directory to /opt/jdk
      become: true
      command: mv {{ item.path }} /opt/jdk
      when: item.path != "/opt/jdk"
      loop: "{{ jdk_dirs.files }}"

    - name: Set permissions on JDK
      file:
        path: /opt/jdk
        owner: root
        group: root
        recurse: yes

- name: Get OpenJDK installed
  hosts: sonarqube
  pre_tasks:
    - name: install unzip
      become: true
      yum:
        name: unzip
        state: present
  tasks:
    - name: Upload .tar.gz file conaining binaries from remote storage
      get_url:
        url: "{{ jdk_url }}"
        dest: "/tmp/jdk-{{ jdk_distr_name }}"
        mode: 0755
      register: download_java_remote_binaries
      until: download_java_remote_binaries is succeeded

    - name: Ensure installation dir exists
      become: true
      file:
        state: directory
        path: "{{ java_home }}"
        mode: 0755

    - name: Extract java in the installation directory
      become: true
      unarchive:
        copy: false
        src: "/tmp/jdk-{{ jdk_distr_name }}"
        dest: "{{ java_home }}"
        extra_opts: [--strip-components=1]
        creates: "{{ java_home }}/bin/java"

    - name: Export environment variables
      become: true
      template:
        src: jdk.sh.j2
        dest: /etc/profile.d/jdk.sh
        owner: root
        group: root
        mode: 0644

- name: Get PostgreSQL installed
  hosts: postgres
  become: true
  tasks:
    - name: Change repo file
      copy:
        src: CentOS-Base.repo
        dest: /etc/yum.repos.d/CentOS-Base.repo
        mode: 0644
        owner: root
        group: root

    - import_tasks: tasks/install_postgres_local.yml

    - name: Init template1 DB
      command: /usr/pgsql-11/bin/postgresql-11-setup initdb
      failed_when: false

    - name: Start pgsql service
      systemd:
        name: "postgresql-{{ postgresql_version }}"
        state: started
        enabled: true

    - name: Create user in system
      user:
        name: "{{ sonarqube_db_user }}"
    - name: Create user for Sonar in PostgreSQL
      become_user: postgres
      command: "createuser -s -e {{ sonarqube_db_user }}"
      failed_when: false

    - name: Change password for Sonar user in PostgreSQL
      become_user: postgres
      command: "psql -c \"ALTER USER sonar WITH ENCRYPTED password '{{ sonarqube_db_password }}';\""

    - name: Create Sonar DB
      become_user: postgres
      command: "createdb {{ sonarqube_db_name }}"
      failed_when: false

    - name: Copy pg_hba.conf
      copy:
        src: pg_hba.conf
        dest: /var/lib/pgsql/11/data/pg_hba.conf
        mode: 0600
        owner: postgres
        group: postgres

- name: Prepare Sonar host
  hosts: sonarqube
  become: true
  tasks:
    - name: Create group in system
      group:
        name: "{{ sonarqube_db_user }}"
        state: present

    - name: Create user in system
      user:
        name: "{{ sonarqube_db_user }}"
        group: "{{ sonarqube_db_user }}"

    - name: "Set up ssh key to access for managed node"
      authorized_key:
        user: "{{ sonarqube_db_user }}"
        state: present
        key: "{{ lookup('file', 'id_rsa.pub') }}"

    - name: "Allow group to have passwordless sudo"
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%{{ sonarqube_db_user }}'
        line: '%{{ sonarqube_db_user }} ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: Increase Virtual Memory
      lineinfile:
        dest: /etc/sysctl.conf
        state: present
        regexp: '^vm.max_map_count'
        line: 'vm.max_map_count=262144'
    - name: Reboot VM
      reboot:

- name: Get Nexus installed
  pre_tasks:
    - name: Remove all default CentOS .repo files (except vault)
      become: yes
      shell: |
        find /etc/yum.repos.d/ -type f -name "*.repo" ! -name "CentOS-Vault.repo" -delete

    - name: Remove centos-release package (blocks repo cleanup)
      become: yes
      yum:
        name: centos-release
        state: absent
      ignore_errors: yes

  hosts: nexus
  pre_tasks:
    - name: Create Nexus group
      become: true
      group:
        name: "{{ nexus_user_group }}"
        state: present

    - name: Create Nexus user
      become: true
      user:
        name: "{{ nexus_user_name }}"

  tasks:
    - import_tasks: tasks/fix_yum_repos.yml

    - name: Create Nexus directories
      become: true
      file:
        group: "{{ nexus_user_group }}"
        owner: "{{ nexus_user_name }}"
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ nexus_directory_log }}"
        - "{{ nexus_directory_data }}"
        - "{{ nexus_directory_data }}/etc"
        - "{{ nexus_directory_package }}"
        - "{{ nexus_directory_tmp }}"

    - name: Download Nexus
      become: true
      become_user: "{{ nexus_user_name }}"
      get_url:
        dest: "{{ nexus_directory_package }}/nexus-{{ nexus_version }}.tar.gz"
        url: "{{ nexus_download_url }}/nexus-{{ nexus_version }}-unix.tar.gz"
        validate_certs: false

    - name: Unpack Nexus
      become: true
      become_user: "{{ nexus_user_name }}"
      unarchive:
        copy: no
        creates: "{{ nexus_directory_package }}/nexus-{{ nexus_version }}"
        dest: "{{ nexus_directory_package }}"
        src: "{{ nexus_directory_package }}/nexus-{{ nexus_version }}.tar.gz"

    - name: Remove existing nexus directory if needed
      become: true
      file:
        path: "{{ nexus_directory_home }}"
        state: absent
        force: true

    - name: Link to Nexus Directory
      become: true
      file:
        dest: "{{ nexus_directory_home }}"
        src: "{{ nexus_directory_package }}/nexus-{{ nexus_version }}"
        state: link

    - name: Add NEXUS_HOME for Nexus user
      become: true
      lineinfile:
        create: yes
        dest: "/home/{{ nexus_user_name }}/.bashrc"
        insertafter: EOF
        line: "export NEXUS_HOME={{ nexus_directory_home }}"


    - name: Add run_as_user to Nexus.rc
      become: true
      lineinfile:
        create: yes
        dest: "{{ nexus_directory_home }}/bin/nexus.rc"
        insertafter: EOF
        line: "run_as_user=\"{{ nexus_user_name }}\""
        regexp: "^run_as_user"

    - name: Raise nofile limit for Nexus user
      become: true
      pam_limits:
        domain: "{{ nexus_user_name }}"
        limit_type: "-"
        limit_item: nofile
        value: "{{ nexus_ulimit }}"

    - name: Create Nexus service for SystemD
      become: true
      template:
        dest: /lib/systemd/system/nexus.service
        mode: 0644
        src: nexus.systemd.j2

    - name: Ensure Nexus service is enabled for SystemD
      become: true
      systemd:
        daemon_reload: yes
        enabled: yes
        name: nexus
      when:
        - nexus_service_enabled

    - name: Create Nexus vmoptions
      become: true
      become_user: "{{ nexus_user_name }}"
      template:
        dest: "{{ nexus_directory_home }}/bin/nexus.vmoptions"
        src: nexus.vmoptions.j2
      register: nexus_config_changed

    - name: Create Nexus properties
      become: true
      become_user: "{{ nexus_user_name }}"
      template:
        dest: "{{ nexus_directory_data }}/etc/nexus.properties"
        src: nexus.properties.j2
      register: nexus_config_changed

    - name: Lower Nexus disk space threshold
      become: true
      become_user: "{{ nexus_user_name }}"
      lineinfile:
        backrefs: yes
        dest: "{{ nexus_directory_home }}/etc/karaf/system.properties"
        insertafter: EOF
        line: "storage.diskCache.diskFreeSpaceLimit={{ nexus_configuration_disk_free_space_limit }}"
        regexp: ^storage\.diskCache\.diskFreeSpaceLimit
      when: nexus_configuration_disk_free_space_limit is not none
      register: nexus_config_changed

    - name: Start Nexus service if enabled
      become: true
      service:
        enabled: yes
        name: nexus
        state: started
      when:
        - nexus_service_start_on_boot
        - not nexus_config_changed.changed
      tags:
        - skip_ansible_lint

    - name: Ensure Nexus service is restarted
      become: true
      service:
        name: nexus
        state: restarted
      when:
        - nexus_service_start_on_boot
        - nexus_config_changed.changed
      tags:
        - skip_ansible_lint

    - name: Wait for Nexus port if started
      wait_for:
        port: "{{ nexus_port }}"
        state: started
        timeout: "{{ nexus_port_check_timeout }}"
      when:
        - nexus_service_start_on_boot

- name: Setup Java 8 for Nexus
  hosts: nexus
  become: true
  vars:
    java8_tarball: openjdk.tar.gz
    java8_install_path: /opt/openjdk8
  tasks:
    - name: Ensure /opt directory exists
      file:
        path: /opt
        state: directory

    - name: Copy Java 8 tarball
      copy:
        src: "files/{{ java8_tarball }}"
        dest: "/tmp/{{ java8_tarball }}"
        mode: '0644'

    - name: Extract Java 8 to /opt
      unarchive:
        src: "/tmp/{{ java8_tarball }}"
        dest: /opt
        remote_src: true

    - name: Rename Java 8 folder to /opt/openjdk8
      command: mv /opt/jdk8u342-b07 /opt/openjdk8
      args:
        creates: /opt/openjdk8

    - name: Update Nexus systemd unit to include INSTALL4J_JAVA_HOME
      lineinfile:
        path: /usr/lib/systemd/system/nexus.service
        insertafter: '^\[Service\]'
        line: 'Environment=INSTALL4J_JAVA_HOME=/opt/openjdk8'
        state: present

    - name: Reload systemd
      command: systemctl daemon-reload

    - name: Restart Nexus
      systemd:
        name: nexus
        state: restarted
